{"version":3,"sources":["theme.ts","TitleBar.tsx","diagram.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","green","secondary","grey","background","default","paper","type","overrides","MuiTooltip","tooltip","fontSize","height","spacing","TitleBar","version","className","style","backgroundColor","lineHeight","color","marginBottom","App","useState","undefined","latest","setLatest","useEffect","Axios","get","then","res","data","catch","console","error","osName","navigator","appVersion","indexOf","assets","Windows","find","a","name","endsWith","MacOS","Linux","UNIX","Unknown","Helmet","tag_name","ThemeProvider","Container","maxWidth","href","rel","target","src","diagram","alt","width","marginTop","Button","variant","browser_download_url","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.073b622a.chunk.js","sourcesContent":["import createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\nimport { green, grey } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: { main: green[\"A700\"] },\r\n    secondary: { main: grey[\"A700\"] },\r\n    background: {\r\n      default: \"#2b2e2e\",\r\n      paper: \"#272727\",\r\n    },\r\n    type: \"dark\",\r\n  },\r\n  overrides: {\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        fontSize: 12,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nimport theme from \"./theme\";\r\n\r\ninterface Props {\r\n  version?: string;\r\n}\r\n\r\nconst height = theme.spacing(5);\r\n// const buttonStyle = { height, color: theme.palette.grey[300] };\r\n\r\nconst TitleBar: React.FC<Props> = ({ version }) => {\r\n  return (\r\n    <>\r\n      <div className=\"titlebar\" style={{ height, backgroundColor: grey[900] }}>\r\n        <span className=\"title\" style={{ height, lineHeight: `${height}px`, color: theme.palette.primary.main }}>\r\n          SpotifySync {version}\r\n        </span>\r\n      </div>\r\n      <div style={{ marginBottom: `${theme.spacing(5)}px` }}></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TitleBar;\r\n","export default __webpack_public_path__ + \"static/media/diagram.e49a5711.jpg\";","import React, { useState, useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Axios from \"axios\";\r\nimport { Button, ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TitleBar from \"./TitleBar\";\r\n\r\nimport diagram from \"./diagram.jpg\";\r\nimport theme from \"./theme\";\r\n\r\ntype OS = \"Unknown\" | \"Windows\" | \"MacOS\" | \"Linux\" | \"UNIX\";\r\n\r\nconst App: React.FC = () => {\r\n  const [latest, setLatest] = useState<any>(undefined);\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"https://api.github.com/repos/MatievisTheKat/spotifysync-app/releases\")\r\n      .then((res) => setLatest(res.data[0]))\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  let osName: OS = \"Unknown\";\r\n  if (navigator.appVersion.indexOf(\"Win\") !== -1) osName = \"Windows\";\r\n  if (navigator.appVersion.indexOf(\"Mac\") !== -1) osName = \"MacOS\";\r\n  if (navigator.appVersion.indexOf(\"X11\") !== -1) osName = \"UNIX\";\r\n  if (navigator.appVersion.indexOf(\"Linux\") !== -1) osName = \"Linux\";\r\n\r\n  const assets: Record<OS, any> | undefined = latest\r\n    ? {\r\n        Windows: latest.assets.find((a: any) => a.name.endsWith(\".exe\")),\r\n        MacOS: latest.assets.find((a: any) => a.name.endsWith(\".dmg\")),\r\n        Linux: latest.assets.find((a: any) => a.name.endsWith(\".deb\")),\r\n        UNIX: undefined,\r\n        Unknown: undefined,\r\n      }\r\n    : undefined;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>SpotifySync {latest ? latest.tag_name : \"\"}</title>\r\n      </Helmet>\r\n      <ThemeProvider theme={theme}>\r\n        <TitleBar version={latest?.tag_name} />\r\n        <Container maxWidth=\"md\">\r\n          <span>\r\n            The SpotifySync app allows anyone to connect to a{\" \"}\r\n            <a href=\"https://github.com/MatievisTheKat/spotifysync-server\" rel=\"noreferrer\" target=\"_blank\">\r\n              SpotifySync Server\r\n            </a>{\" \"}\r\n            via a HTTP(s) URL.\r\n            <br />A{\" \"}\r\n            <a href=\"https://github.com/MatievisTheKat/spotifysync-server\" rel=\"noreferrer\" target=\"_blank\">\r\n              SpotifySync Server\r\n            </a>{\" \"}\r\n            will periodically broadcast updates on the set user's Spotify track, progress, etc to all connected clients.\r\n            <br />\r\n            Each{\" \"}\r\n            <a href=\"https://github.com/MatievisTheKat/spotifysync-server\" rel=\"noreferrer\" target=\"_blank\">\r\n              SpotifySync Server\r\n            </a>{\" \"}\r\n            can only send updates for <strong>one</strong> Spotify user at a time\r\n            <br />\r\n            So if you want to broadcast what you're listening to on Spotify to anyone you will need to set up your own{\" \"}\r\n            <a href=\"https://github.com/MatievisTheKat/spotifysync-server\" rel=\"noreferrer\" target=\"_blank\">\r\n              SpotifySync Server\r\n            </a>\r\n          </span>\r\n          <br />\r\n          <br />\r\n          <span>Here's a useful diagram to help you understand exactly what goes on behind the scenes</span>\r\n          <img src={diagram} alt=\"A useful diagram\" width=\"80%\" style={{ marginTop: `${theme.spacing(2)}px` }} />\r\n\r\n          <hr />\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            href={\r\n              assets && assets[osName]\r\n                ? assets[osName].browser_download_url\r\n                : \"https://github.com/MatievisTheKat/spotifysync-app/releases/latest\"\r\n            }>\r\n            Download{assets && assets[osName] ? ` for ${osName}` : \"\"}\r\n          </Button>\r\n        </Container>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}